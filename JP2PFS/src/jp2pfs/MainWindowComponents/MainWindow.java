/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jp2pfs.MainWindowComponents;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.swing.*;
import jp2pfs.Chat.ChatMessage;
import jp2pfs.client.PTPClient;
import jp2pfs.client.PTPClientListener;
import jp2pfs.client.PTPClientMessage;
import jp2pfs.client.PTPClientMessage.PTPClientMessageCode;
import jp2pfs.global.IPHandling;
import jp2pfs.server.PTPServer;
import jp2pfs.server.PTPServerListener;
import jp2pfs.server.PTPServerMessage;

/**
 *
 * @author karlinsv
 */
public class MainWindow extends javax.swing.JFrame {
    
    private PTPServer server = null;
    int serverport = 0;
    
    UserItem self = null;
    
    List<ChatMessage> messageList = new ArrayList<ChatMessage>();
    
    FileTreeModel treeModel = null;
    
    PTPServerListener serverListener = new PTPServerListener() {

        @Override
        public void onMessage(PTPServerMessage message) {
            
        }
    };
    
    PTPClientListener clientListener = new PTPClientListener() {

        @Override
        public void onMessage(PTPClientMessage message) {
            onClientMessage(message);
        }
        
    };
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        userListScrollPane = new javax.swing.JScrollPane();
        userList = new javax.swing.JList();
        mainWindowTabPane = new javax.swing.JTabbedPane();
        mainWindowHomePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileTree = new FileTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("MainWindow");
        setResizable(false);

        jSplitPane1.setDividerLocation(110);

        userListScrollPane.setName("Userlist");

        userList.setModel(new DefaultListModel<UserItem>());
        userListScrollPane.setViewportView(userList);

        jSplitPane1.setLeftComponent(userListScrollPane);

        fileTree.setModel(new FileTreeModel());
        jScrollPane1.setViewportView(fileTree);

        javax.swing.GroupLayout mainWindowHomePanelLayout = new javax.swing.GroupLayout(mainWindowHomePanel);
        mainWindowHomePanel.setLayout(mainWindowHomePanelLayout);
        mainWindowHomePanelLayout.setHorizontalGroup(
            mainWindowHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
        );
        mainWindowHomePanelLayout.setVerticalGroup(
            mainWindowHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
        );

        mainWindowTabPane.addTab("Home", mainWindowHomePanel);

        jSplitPane1.setRightComponent(mainWindowTabPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree fileTree;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel mainWindowHomePanel;
    private javax.swing.JTabbedPane mainWindowTabPane;
    private javax.swing.JList userList;
    private javax.swing.JScrollPane userListScrollPane;
    // End of variables declaration//GEN-END:variables

    private void init() {
        initServerConnection();
        initUserList();
        initTabPane();
        startServer();
        ((FileTree)fileTree).initHome();
    }

    private void initServerConnection() {
        try {
            UserItem from = new UserItem(InetAddress.getLocalHost().toString(), new InetSocketAddress(InetAddress.getLocalHost(), 2100));
            UserItem to = new UserItem(InetAddress.getLocalHost().toString(), new InetSocketAddress(InetAddress.getLocalHost() /*InetAddress.getByName("dauerstoned-clan.de")*/, 1234));
            new PTPClient(from, to).register();
        } catch (UnknownHostException ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    private void initTabPane() {
        mainWindowTabPane.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(final MouseEvent e) {
                if(SwingUtilities.isRightMouseButton(e)) {
                    int index = mainWindowTabPane.getSelectedIndex();
                    if(index != 0) {
                        for(UserItem user : getUserList()) {
                            if(user.getTabIndex() == index) {
                                user.setTabIndex(0);
                                mainWindowTabPane.removeTabAt(index);
                            } else if(user.getTabIndex() > index) {
                                user.setTabIndex(user.getTabIndex()-1);
                            }
                        }
                    }
                }
            }
        });
    }

    private void initUser() {
        List<InetAddress> localip = IPHandling.getLocalIpList();
        for(int i = 0; i<userList.getModel().getSize(); i++) {
            UserItem current = (UserItem)userList.getModel().getElementAt(i);
            for(InetAddress ip : localip) {
                if(current.getIp().getAddress().equals(ip)) {
                    self = current;
                    self.setTreeModel((FileTreeModel)fileTree.getModel());
                }
            }
        }
    }

    private void initUserList() {
        userList.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                JList list = (JList)evt.getSource();
                if (evt.getClickCount() == 2) {
                    int index = list.locationToIndex(evt.getPoint());
                    if(index >= 0) {
                        createTabUser(index);
                    }
                } else if (evt.getClickCount() == 3) {   // Triple-click
                    int index = list.locationToIndex(evt.getPoint());

                }
            }
        });
    }
    
    private void createTabUser(int userindex) {
        UserItem item = (UserItem)userList.getModel().getElementAt(userindex);
        UserPanel panel = new UserPanel(self, item);
        if(item.getTabIndex() == 0) {
            if(item != self) {
                panel.setMessages(this.getSpecificMessageListForUser(item));
                mainWindowTabPane.addTab(item.getUsername(), panel);
                item.setTabIndex(mainWindowTabPane.indexOfComponent(panel));
            }
        }
        if(item != self) {
            mainWindowTabPane.setSelectedIndex(item.getTabIndex());
        } else {
            mainWindowTabPane.setSelectedIndex(0);
        }
    }
    
    private void startServer() {
        if(server == null) {
            server = new PTPServer(serverport, this.getUserList());
            server.addServerListener(serverListener);
            server.addClientListener(clientListener);
        }
        new Thread(server).start();
    }

    private void stopServer() {
        if(server != null) {
            server.stop();
        }
    }
    
    private List<UserItem> getUserList() {
        DefaultListModel<UserItem> list = (DefaultListModel<UserItem>) userList.getModel();
        List<UserItem> returnUserList = new ArrayList<UserItem>();
        for(int i = 0; i<list.getSize(); i++) {
            UserItem user = list.getElementAt(i);
            returnUserList.add(user);
        }
        return returnUserList;
    }
    
    private List<ChatMessage> getSpecificMessageListForUser(UserItem user) {
        List<ChatMessage> specificMessageList = new ArrayList<ChatMessage>();
        for(ChatMessage chatMessage : messageList) {
            if(chatMessage.getFrom().equals(user)) {
                specificMessageList.add(chatMessage);
            } else if(chatMessage.getTo().equals(user)) {
                specificMessageList.add(chatMessage);
            }
        }
        return specificMessageList;
    }
    
    public void pushMessage(PTPClientMessage message) {
        List<UserItem> list = this.getUserList();
        if(message.getMessageCode().equals(PTPClientMessageCode.MESSAGE_SEND_SUCCESS)) {
            for(UserItem user : list) {
                if(message.getTo().equals(user)) {
                    ChatMessage chatMessage = new ChatMessage(message.getFrom(), message.getTo(), (String)message.getMessage());
                    messageList.add(chatMessage);
                    if(user.getTabIndex() != 0) {
                        ((UserPanel)mainWindowTabPane.getComponentAt(user.getTabIndex())).addMessage(chatMessage);
                    }
                    break;
                }
            }
        } else if(message.getMessageCode().equals(PTPClientMessageCode.MESSAGE_RECEIVE_SUCCESS)) {
            for(UserItem user : list) {
                if(message.getFrom().equals(user)) {
                    ChatMessage chatMessage = new ChatMessage(message.getFrom(), message.getTo(), (String)message.getMessage());
                    messageList.add(chatMessage);
                    if(user.getTabIndex() != 0) {
                        ((UserPanel)mainWindowTabPane.getComponentAt(user.getTabIndex())).addMessage(chatMessage);
                    } else {
                        createTabUser(list.indexOf(user));
                    }
                    mainWindowTabPane.setSelectedIndex(user.getTabIndex());
                }
            }
        } else if(message.getMessageCode().equals(PTPClientMessageCode.FILE_LIST_RECEIVE_SUCCESS)) {
            FileTreeModel currentTreeModel = (FileTreeModel) message.getMessage();
            System.out.println(currentTreeModel);
            message.getFrom().setTreeModel(currentTreeModel);
            ((UserPanel)mainWindowTabPane.getComponentAt(message.getFrom().getTabIndex())).updateTreeModel(currentTreeModel);
        }
    }
    
    private void onClientMessage(PTPClientMessage message) {
        if(message.getSender() instanceof PTPClient) {
            switch(message.getMessageCode()) {
                case MESSAGE_SEND_SUCCESS:
                    pushMessage(message);
                    break;
                case MESSAGE_RECEIVE_SUCCESS:
                    pushMessage(message);
                    break;
                case FILE_LIST_REQUEST:
                    PTPClient client = new PTPClient(message.getTo(), message.getFrom());
                    client.sendFileListMessageClient(self.getTreeModel());
                    break;
                case FILE_LIST_RECEIVE_SUCCESS:
                    pushMessage(message);
                    break;
                case USER_LIST_RECEIVE_SUCCESS:
                    updateUserList(message);
                    break;
                default:
                    System.out.println(message.getMessage());
                    break;
                    
            }
        }
    }

    private void updateUserList(PTPClientMessage message) {
        DefaultListModel<UserItem> list = (DefaultListModel<UserItem>)userList.getModel();
        list.clear();
        LinkedHashMap map = (LinkedHashMap)message.getMessage();
        Iterator it = map.entrySet().iterator();
        while(it.hasNext()) {
            Map.Entry entry = (Map.Entry)it.next();
            list.addElement(new UserItem((String)entry.getValue(), (InetSocketAddress)entry.getKey()));
        }
        initUser();
    }
}
